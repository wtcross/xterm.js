{"version":3,"file":"LigaturesAddon.js","sources":["../../../addons/addon-ligatures/node_modules/font-ligatures/dist/index.js","../../../addons/addon-ligatures/out-es6/parse.js","../../../addons/addon-ligatures/out-es6/font.js","../../../addons/addon-ligatures/out-es6/index.js","../../../addons/addon-ligatures/out-es6/LigaturesAddon.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst opentype = require(\"opentype.js\");\nconst lru = require(\"lru-cache\");\nconst merge_1 = require(\"./merge\");\nconst walk_1 = require(\"./walk\");\nconst mergeRange_1 = require(\"./mergeRange\");\nconst _6_1_1 = require(\"./processors/6-1\");\nconst _6_2_1 = require(\"./processors/6-2\");\nconst _6_3_1 = require(\"./processors/6-3\");\nconst _8_1_1 = require(\"./processors/8-1\");\nconst flatten_1 = require(\"./flatten\");\nclass FontImpl {\n    constructor(font, options) {\n        this._lookupTrees = [];\n        this._glyphLookups = {};\n        this._font = font;\n        if (options.cacheSize > 0) {\n            this._cache = new lru({\n                max: options.cacheSize,\n                length: ((val, key) => key.length)\n            });\n        }\n        const caltFeatures = this._font.tables.gsub && this._font.tables.gsub.features.filter(f => f.tag === 'calt') || [];\n        const lookupIndices = caltFeatures\n            .reduce((acc, val) => [...acc, ...val.feature.lookupListIndexes], []);\n        const allLookups = this._font.tables.gsub && this._font.tables.gsub.lookups || [];\n        const lookupGroups = allLookups.filter((l, i) => lookupIndices.some(idx => idx === i));\n        for (const [index, lookup] of lookupGroups.entries()) {\n            const trees = [];\n            switch (lookup.lookupType) {\n                case 6:\n                    for (const [index, table] of lookup.subtables.entries()) {\n                        switch (table.substFormat) {\n                            case 1:\n                                trees.push(_6_1_1.default(table, allLookups, index));\n                                break;\n                            case 2:\n                                trees.push(_6_2_1.default(table, allLookups, index));\n                                break;\n                            case 3:\n                                trees.push(_6_3_1.default(table, allLookups, index));\n                                break;\n                        }\n                    }\n                    break;\n                case 8:\n                    for (const [index, table] of lookup.subtables.entries()) {\n                        trees.push(_8_1_1.default(table, index));\n                    }\n                    break;\n            }\n            const tree = flatten_1.default(merge_1.default(trees));\n            this._lookupTrees.push({\n                tree,\n                processForward: lookup.lookupType !== 8\n            });\n            for (const glyphId of Object.keys(tree)) {\n                if (!this._glyphLookups[glyphId]) {\n                    this._glyphLookups[glyphId] = [];\n                }\n                this._glyphLookups[glyphId].push(index);\n            }\n        }\n    }\n    findLigatures(text) {\n        const cached = this._cache && this._cache.get(text);\n        if (cached && !Array.isArray(cached)) {\n            return cached;\n        }\n        const glyphIds = [];\n        for (const char of text) {\n            glyphIds.push(this._font.charToGlyphIndex(char));\n        }\n        // If there are no lookup groups, there's no point looking for\n        // replacements. This gives us a minor performance boost for fonts with\n        // no ligatures\n        if (this._lookupTrees.length === 0) {\n            return {\n                inputGlyphs: glyphIds,\n                outputGlyphs: glyphIds,\n                contextRanges: []\n            };\n        }\n        const result = this._findInternal(glyphIds.slice());\n        const finalResult = {\n            inputGlyphs: glyphIds,\n            outputGlyphs: result.sequence,\n            contextRanges: result.ranges\n        };\n        if (this._cache) {\n            this._cache.set(text, finalResult);\n        }\n        return finalResult;\n    }\n    findLigatureRanges(text) {\n        // Short circuit the process if there are no possible ligatures in the\n        // font\n        if (this._lookupTrees.length === 0) {\n            return [];\n        }\n        const cached = this._cache && this._cache.get(text);\n        if (cached) {\n            return Array.isArray(cached) ? cached : cached.contextRanges;\n        }\n        const glyphIds = [];\n        for (const char of text) {\n            glyphIds.push(this._font.charToGlyphIndex(char));\n        }\n        const result = this._findInternal(glyphIds);\n        if (this._cache) {\n            this._cache.set(text, result.ranges);\n        }\n        return result.ranges;\n    }\n    _findInternal(sequence) {\n        const ranges = [];\n        let nextLookup = this._getNextLookup(sequence, 0);\n        while (nextLookup.index !== null) {\n            const lookup = this._lookupTrees[nextLookup.index];\n            if (lookup.processForward) {\n                let lastGlyphIndex = nextLookup.last;\n                for (let i = nextLookup.first; i < lastGlyphIndex; i++) {\n                    const result = walk_1.default(lookup.tree, sequence, i, i);\n                    if (result) {\n                        for (let j = 0; j < result.substitutions.length; j++) {\n                            const sub = result.substitutions[j];\n                            if (sub !== null) {\n                                sequence[i + j] = sub;\n                            }\n                        }\n                        mergeRange_1.default(ranges, result.contextRange[0] + i, result.contextRange[1] + i);\n                        // Substitutions can end up extending the search range\n                        if (i + result.length >= lastGlyphIndex) {\n                            lastGlyphIndex = i + result.length + 1;\n                        }\n                        i += result.length - 1;\n                    }\n                }\n            }\n            else {\n                // We don't need to do the lastGlyphIndex tracking here because\n                // reverse processing isn't allowed to replace more than one\n                // character at a time.\n                for (let i = nextLookup.last - 1; i >= nextLookup.first; i--) {\n                    const result = walk_1.default(lookup.tree, sequence, i, i);\n                    if (result) {\n                        for (let j = 0; j < result.substitutions.length; j++) {\n                            const sub = result.substitutions[j];\n                            if (sub !== null) {\n                                sequence[i + j] = sub;\n                            }\n                        }\n                        mergeRange_1.default(ranges, result.contextRange[0] + i, result.contextRange[1] + i);\n                        i -= result.length - 1;\n                    }\n                }\n            }\n            nextLookup = this._getNextLookup(sequence, nextLookup.index + 1);\n        }\n        return { sequence, ranges };\n    }\n    /**\n     * Returns the lookup and glyph range for the first lookup that might\n     * contain a match.\n     *\n     * @param sequence Input glyph sequence\n     * @param start The first input to try\n     */\n    _getNextLookup(sequence, start) {\n        const result = {\n            index: null,\n            first: Infinity,\n            last: -1\n        };\n        // Loop through each glyph and find the first valid lookup for it\n        for (let i = 0; i < sequence.length; i++) {\n            const lookups = this._glyphLookups[sequence[i]];\n            if (!lookups) {\n                continue;\n            }\n            for (let j = 0; j < lookups.length; j++) {\n                const lookupIndex = lookups[j];\n                if (lookupIndex >= start) {\n                    // Update the lookup information if it's the one we're\n                    // storing or earlier than it.\n                    if (result.index === null || lookupIndex <= result.index) {\n                        result.index = lookupIndex;\n                        if (result.first > i) {\n                            result.first = i;\n                        }\n                        result.last = i + 1;\n                    }\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n}\n/**\n * Load the font with the given name. The returned value can be used to find\n * ligatures for the font.\n *\n * @param name Font family name for the font to load\n */\nasync function load(name, options) {\n    // We just grab the first font variant we find for now.\n    // TODO: allow users to specify information to pick a specific variant\n    const [fontInfo] = await Promise.resolve().then(() => require('font-finder')).then(fontFinder => fontFinder.listVariants(name));\n    if (!fontInfo) {\n        throw new Error(`Font ${name} not found`);\n    }\n    return loadFile(fontInfo.path, options);\n}\nexports.load = load;\n/**\n * Load the font at the given file path. The returned value can be used to find\n * ligatures for the font.\n *\n * @param path Path to the file containing the font\n */\nasync function loadFile(path, options) {\n    const font = await Promise.resolve().then(() => require('util')).then(util => util.promisify(opentype.load)(path));\n    return new FontImpl(font, Object.assign({ cacheSize: 0 }, options));\n}\nexports.loadFile = loadFile;\n/**\n * Load the font from it's binary data. The returned value can be used to find\n * ligatures for the font.\n *\n * @param buffer ArrayBuffer of the font to load\n */\nfunction loadBuffer(buffer, options) {\n    const font = opentype.parse(buffer);\n    return new FontImpl(font, Object.assign({ cacheSize: 0 }, options));\n}\nexports.loadBuffer = loadBuffer;\n//# sourceMappingURL=index.js.map","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n/**\n * Parses a CSS font family value, returning the component font families\n * contained within.\n *\n * @param family The CSS font family input string to parse\n */\nexport default function parse(family) {\n    if (typeof family !== 'string') {\n        throw new Error('Font family must be a string');\n    }\n    const context = {\n        input: family,\n        offset: 0\n    };\n    const families = [];\n    let currentFamily = '';\n    // Work through the input character by character until there are none left.\n    // This lexing and parsing in one pass.\n    while (context.offset < context.input.length) {\n        const char = context.input[context.offset++];\n        switch (char) {\n            // String\n            case '\\'':\n            case '\"':\n                currentFamily += parseString(context, char);\n                break;\n            // End of family\n            case ',':\n                families.push(currentFamily);\n                currentFamily = '';\n                break;\n            default:\n                // Identifiers (whitespace between families is swallowed)\n                if (!/\\s/.test(char)) {\n                    context.offset--;\n                    currentFamily += parseIdentifier(context);\n                    families.push(currentFamily);\n                    currentFamily = '';\n                }\n        }\n    }\n    return families;\n}\n/**\n * Parse a CSS string.\n *\n * @param context Parsing input and offset\n * @param quoteChar The quote character for the string (' or \")\n */\nfunction parseString(context, quoteChar) {\n    let str = '';\n    let escaped = false;\n    while (context.offset < context.input.length) {\n        const char = context.input[context.offset++];\n        if (escaped) {\n            if (/[\\dA-Fa-f]/.test(char)) {\n                // Unicode escape\n                context.offset--;\n                str += parseUnicode(context);\n            }\n            else if (char !== '\\n') {\n                // Newlines are ignored if escaped. Other characters are used as is.\n                str += char;\n            }\n            escaped = false;\n        }\n        else {\n            switch (char) {\n                // Terminated quote\n                case quoteChar:\n                    return str;\n                // Begin escape\n                case '\\\\':\n                    escaped = true;\n                    break;\n                // Add character to string\n                default:\n                    str += char;\n            }\n        }\n    }\n    throw new Error('Unterminated string');\n}\n/**\n * Parse a CSS custom identifier.\n *\n * @param context Parsing input and offset\n */\nfunction parseIdentifier(context) {\n    let str = '';\n    let escaped = false;\n    while (context.offset < context.input.length) {\n        const char = context.input[context.offset++];\n        if (escaped) {\n            if (/[\\dA-Fa-f]/.test(char)) {\n                // Unicode escape\n                context.offset--;\n                str += parseUnicode(context);\n            }\n            else {\n                // Everything else is used as is\n                str += char;\n            }\n            escaped = false;\n        }\n        else {\n            switch (char) {\n                // Begin escape\n                case '\\\\':\n                    escaped = true;\n                    break;\n                // Terminate identifier\n                case ',':\n                    return str;\n                default:\n                    if (/\\s/.test(char)) {\n                        // Whitespace is collapsed into a single space within an identifier\n                        if (!str.endsWith(' ')) {\n                            str += ' ';\n                        }\n                    }\n                    else {\n                        // Add other characters directly\n                        str += char;\n                    }\n            }\n        }\n    }\n    return str;\n}\n/**\n * Parse a CSS unicode escape.\n *\n * @param context Parsing input and offset\n */\nfunction parseUnicode(context) {\n    let str = '';\n    while (context.offset < context.input.length) {\n        const char = context.input[context.offset++];\n        if (/\\s/.test(char)) {\n            // The first whitespace character after a unicode escape indicates the end\n            // of the escape and is swallowed.\n            return unicodeToString(str);\n        }\n        if (str.length >= 6 || !/[\\dA-Fa-f]/.test(char)) {\n            // If the next character is not a valid hex digit or we have reached the\n            // maximum of 6 digits in the escape, terminate the escape.\n            context.offset--;\n            return unicodeToString(str);\n        }\n        // Otherwise, just add it to the escape\n        str += char;\n    }\n    return unicodeToString(str);\n}\n/**\n * Convert a unicode code point from a hex string to a utf8 string.\n *\n * @param codePoint Unicode code point represented as a hex string\n */\nfunction unicodeToString(codePoint) {\n    return String.fromCodePoint(parseInt(codePoint, 16));\n}\n//# sourceMappingURL=parse.js.map","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\nimport * as FontLigatures from 'font-ligatures';\nconst loadBuffer = FontLigatures.loadBuffer;\nimport parse from './parse';\nlet fontsPromise = undefined;\n/**\n * Loads the font ligature wrapper for the specified font family if it could be\n * resolved, throwing if it is unable to find a suitable match.\n * @param fontFamily The CSS font family definition to resolve\n * @param cacheSize The size of the ligature cache to maintain if the font is resolved\n */\nexport default async function load(fontFamily, cacheSize) {\n    var _a, _b;\n    if (!fontsPromise) {\n        // Web environment that supports font access API\n        if (typeof navigator !== 'undefined' && 'fonts' in navigator) {\n            try {\n                const status = await ((_b = (_a = navigator.permissions).request) === null || _b === void 0 ? void 0 : _b.call(_a, {\n                    name: 'local-fonts'\n                }));\n                if (status && status.state !== 'granted') {\n                    throw new Error('Permission to access local fonts not granted.');\n                }\n            }\n            catch (err) {\n                // A `TypeError` indicates the 'local-fonts'\n                // permission is not yet implemented, so\n                // only `throw` if this is _not_ the problem.\n                if (err.name !== 'TypeError') {\n                    throw err;\n                }\n            }\n            const fonts = {};\n            try {\n                const fontsIterator = await navigator.fonts.query();\n                for (const metadata of fontsIterator) {\n                    if (!fonts.hasOwnProperty(metadata.family)) {\n                        fonts[metadata.family] = [];\n                    }\n                    fonts[metadata.family].push(metadata);\n                }\n                fontsPromise = Promise.resolve(fonts);\n            }\n            catch (err) {\n                console.error(err.name, err.message);\n            }\n        }\n        // Latest proposal https://bugs.chromium.org/p/chromium/issues/detail?id=1312603\n        else if (typeof window !== 'undefined' && 'queryLocalFonts' in window) {\n            const fonts = {};\n            try {\n                const fontsIterator = await window.queryLocalFonts();\n                for (const metadata of fontsIterator) {\n                    if (!fonts.hasOwnProperty(metadata.family)) {\n                        fonts[metadata.family] = [];\n                    }\n                    fonts[metadata.family].push(metadata);\n                }\n                fontsPromise = Promise.resolve(fonts);\n            }\n            catch (err) {\n                console.error(err.name, err.message);\n            }\n        }\n        if (!fontsPromise) {\n            fontsPromise = Promise.resolve({});\n        }\n    }\n    const fonts = await fontsPromise;\n    for (const family of parse(fontFamily)) {\n        // If we reach one of the generic font families, the font resolution\n        // will end for the browser and we can't determine the specific font\n        // used. Throw.\n        if (genericFontFamilies.includes(family)) {\n            return undefined;\n        }\n        if (fonts.hasOwnProperty(family) && fonts[family].length > 0) {\n            const font = fonts[family][0];\n            if ('blob' in font) {\n                const bytes = await font.blob();\n                const buffer = await bytes.arrayBuffer();\n                return loadBuffer(buffer, { cacheSize });\n            }\n            return undefined;\n        }\n    }\n    // If none of the fonts could resolve, throw an error\n    return undefined;\n}\n// https://drafts.csswg.org/css-fonts-4/#generic-font-families\nconst genericFontFamilies = [\n    'serif',\n    'sans-serif',\n    'cursive',\n    'fantasy',\n    'monospace',\n    'system-ui',\n    'emoji',\n    'math',\n    'fangsong'\n];\n//# sourceMappingURL=font.js.map\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\nimport load from './font';\n// Caches 100K characters worth of ligatures. In practice this works out to\n// about 650 KB worth of cache, when a moderate number of ligatures are present.\nconst CACHE_SIZE = 100000;\n/**\n * Enable ligature support for the provided Terminal instance. To function\n * properly, this must be called after `open()` is called on the therminal. If\n * the font currently in use supports ligatures, the terminal will automatically\n * start to render them.\n * @param term Terminal instance from xterm.js\n */\nexport function enableLigatures(term, fallbackLigatures = []) {\n    let currentFontName = undefined;\n    let font = undefined;\n    let loadingState = 0 /* LoadingState.UNLOADED */;\n    let loadError = undefined;\n    return term.registerCharacterJoiner((text) => {\n        // If the font hasn't been loaded yet, load it and return an empty result\n        const termFont = term.options.fontFamily;\n        if (termFont &&\n            (loadingState === 0 /* LoadingState.UNLOADED */ || currentFontName !== termFont)) {\n            font = undefined;\n            loadingState = 1 /* LoadingState.LOADING */;\n            currentFontName = termFont;\n            const currentCallFontName = currentFontName;\n            load(currentCallFontName, CACHE_SIZE)\n                .then(f => {\n                // Another request may have come in while we were waiting, so make\n                // sure our font is still vaild.\n                if (currentCallFontName === term.options.fontFamily) {\n                    loadingState = 2 /* LoadingState.LOADED */;\n                    font = f;\n                    // Only refresh things if we actually found a font\n                    if (f) {\n                        term.refresh(0, term.rows - 1);\n                    }\n                }\n            })\n                .catch(e => {\n                // Another request may have come in while we were waiting, so make\n                // sure our font is still vaild.\n                if (currentCallFontName === term.options.fontFamily) {\n                    loadingState = 3 /* LoadingState.FAILED */;\n                    if (term.options.logLevel === 'debug') {\n                        console.debug(loadError, new Error('Failure while loading font'));\n                    }\n                    font = undefined;\n                    loadError = e;\n                }\n            });\n        }\n        if (font && loadingState === 2 /* LoadingState.LOADED */) {\n            // We clone the entries to avoid the internal cache of the ligature finder\n            // getting messed up.\n            return font.findLigatureRanges(text).map(range => [range[0], range[1]]);\n        }\n        return getFallbackRanges(text, fallbackLigatures);\n    });\n}\nfunction getFallbackRanges(text, fallbackLigatures) {\n    const ranges = [];\n    for (let i = 0; i < text.length; i++) {\n        for (let j = 0; j < fallbackLigatures.length; j++) {\n            if (text.startsWith(fallbackLigatures[j], i)) {\n                ranges.push([i, i + fallbackLigatures[j].length]);\n                i += fallbackLigatures[j].length - 1;\n                break;\n            }\n        }\n    }\n    return ranges;\n}\n//# sourceMappingURL=index.js.map","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\nimport { enableLigatures } from '.';\nexport class LigaturesAddon {\n    constructor(options) {\n        this._fallbackLigatures = ((options === null || options === void 0 ? void 0 : options.fallbackLigatures) || [\n            '<--', '<---', '<<-', '<-', '->', '->>', '-->', '--->',\n            '<==', '<===', '<<=', '<=', '=>', '=>>', '==>', '===>', '>=', '>>=',\n            '<->', '<-->', '<--->', '<---->', '<=>', '<==>', '<===>', '<====>', '-------->',\n            '<~~', '<~', '~>', '~~>', '::', ':::', '==', '!=', '===', '!==',\n            ':=', ':-', ':+', '<*', '<*>', '*>', '<|', '<|>', '|>', '+:', '-:', '=:', ':>',\n            '++', '+++', '<!--', '<!---', '<***>'\n        ]).sort((a, b) => b.length - a.length);\n    }\n    activate(terminal) {\n        this._terminal = terminal;\n        this._characterJoinerId = enableLigatures(terminal, this._fallbackLigatures);\n    }\n    dispose() {\n        var _a;\n        if (this._characterJoinerId !== undefined) {\n            (_a = this._terminal) === null || _a === void 0 ? void 0 : _a.deregisterCharacterJoiner(this._characterJoinerId);\n            this._characterJoinerId = undefined;\n        }\n    }\n}\n//# sourceMappingURL=LigaturesAddon.js.map"],"names":["load","loadBuffer","FontLigatures.loadBuffer"],"mappings":"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","x_google_ignoreList":[0]}