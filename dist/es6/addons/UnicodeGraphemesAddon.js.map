{"version":3,"file":"UnicodeGraphemesAddon.js","sources":["../../../addons/addon-unicode-graphemes/out-es6/third-party/tiny-inflate.js","../../../addons/addon-unicode-graphemes/out-es6/third-party/unicode-trie.js","../../../addons/addon-unicode-graphemes/out-es6/third-party/UnicodeProperties.js","../../../addons/addon-unicode-graphemes/out-es6/UnicodeGraphemeProvider.js","../../../addons/addon-unicode-graphemes/out-es6/UnicodeGraphemesAddon.js"],"sourcesContent":["var TINF_OK = 0;\nvar TINF_DATA_ERROR = -3;\nclass Tree {\n    constructor() {\n        this.table = new Uint16Array(16);\n        this.trans = new Uint16Array(288);\n    }\n}\n;\nclass Data {\n    constructor(source, dest) {\n        this.tag = 0;\n        this.bitcount = 0;\n        this.destLen = 0;\n        this.sourceIndex = 0;\n        this.source = source;\n        this.dest = dest;\n        this.ltree = new Tree();\n        this.dtree = new Tree();\n    }\n}\nvar sltree = new Tree();\nvar sdtree = new Tree();\nvar length_bits = new Uint8Array(30);\nvar length_base = new Uint16Array(30);\nvar dist_bits = new Uint8Array(30);\nvar dist_base = new Uint16Array(30);\nvar clcidx = new Uint8Array([\n    16, 17, 18, 0, 8, 7, 9, 6,\n    10, 5, 11, 4, 12, 3, 13, 2,\n    14, 1, 15\n]);\nconst code_tree = new Tree();\nconst lengths = new Uint8Array(288 + 32);\nfunction tinf_build_bits_base(bits, base, delta, first) {\n    var i, sum;\n    for (i = 0; i < delta; ++i)\n        bits[i] = 0;\n    for (i = 0; i < 30 - delta; ++i)\n        bits[i + delta] = i / delta | 0;\n    for (sum = first, i = 0; i < 30; ++i) {\n        base[i] = sum;\n        sum += 1 << bits[i];\n    }\n}\nfunction tinf_build_fixed_trees(lt, dt) {\n    var i;\n    for (i = 0; i < 7; ++i)\n        lt.table[i] = 0;\n    lt.table[7] = 24;\n    lt.table[8] = 152;\n    lt.table[9] = 112;\n    for (i = 0; i < 24; ++i)\n        lt.trans[i] = 256 + i;\n    for (i = 0; i < 144; ++i)\n        lt.trans[24 + i] = i;\n    for (i = 0; i < 8; ++i)\n        lt.trans[24 + 144 + i] = 280 + i;\n    for (i = 0; i < 112; ++i)\n        lt.trans[24 + 144 + 8 + i] = 144 + i;\n    for (i = 0; i < 5; ++i)\n        dt.table[i] = 0;\n    dt.table[5] = 32;\n    for (i = 0; i < 32; ++i)\n        dt.trans[i] = i;\n}\nvar offs = new Uint16Array(16);\nfunction tinf_build_tree(t, lengths, off, num) {\n    var i, sum;\n    for (i = 0; i < 16; ++i)\n        t.table[i] = 0;\n    for (i = 0; i < num; ++i)\n        t.table[lengths[off + i]]++;\n    t.table[0] = 0;\n    for (sum = 0, i = 0; i < 16; ++i) {\n        offs[i] = sum;\n        sum += t.table[i];\n    }\n    for (i = 0; i < num; ++i) {\n        if (lengths[off + i])\n            t.trans[offs[lengths[off + i]]++] = i;\n    }\n}\nfunction tinf_getbit(d) {\n    if (!d.bitcount--) {\n        d.tag = d.source[d.sourceIndex++];\n        d.bitcount = 7;\n    }\n    var bit = d.tag & 1;\n    d.tag >>>= 1;\n    return bit;\n}\nfunction tinf_read_bits(d, num, base) {\n    if (!num)\n        return base;\n    while (d.bitcount < 24) {\n        d.tag |= d.source[d.sourceIndex++] << d.bitcount;\n        d.bitcount += 8;\n    }\n    var val = d.tag & (0xffff >>> (16 - num));\n    d.tag >>>= num;\n    d.bitcount -= num;\n    return val + base;\n}\nfunction tinf_decode_symbol(d, t) {\n    while (d.bitcount < 24) {\n        d.tag |= d.source[d.sourceIndex++] << d.bitcount;\n        d.bitcount += 8;\n    }\n    var sum = 0, cur = 0, len = 0;\n    var tag = d.tag;\n    do {\n        cur = 2 * cur + (tag & 1);\n        tag >>>= 1;\n        ++len;\n        sum += t.table[len];\n        cur -= t.table[len];\n    } while (cur >= 0);\n    d.tag = tag;\n    d.bitcount -= len;\n    return t.trans[sum + cur];\n}\nfunction tinf_decode_trees(d, lt, dt) {\n    var hlit, hdist, hclen;\n    var i, num, length;\n    hlit = tinf_read_bits(d, 5, 257);\n    hdist = tinf_read_bits(d, 5, 1);\n    hclen = tinf_read_bits(d, 4, 4);\n    for (i = 0; i < 19; ++i)\n        lengths[i] = 0;\n    for (i = 0; i < hclen; ++i) {\n        var clen = tinf_read_bits(d, 3, 0);\n        lengths[clcidx[i]] = clen;\n    }\n    tinf_build_tree(code_tree, lengths, 0, 19);\n    for (num = 0; num < hlit + hdist;) {\n        var sym = tinf_decode_symbol(d, code_tree);\n        switch (sym) {\n            case 16:\n                var prev = lengths[num - 1];\n                for (length = tinf_read_bits(d, 2, 3); length; --length) {\n                    lengths[num++] = prev;\n                }\n                break;\n            case 17:\n                for (length = tinf_read_bits(d, 3, 3); length; --length) {\n                    lengths[num++] = 0;\n                }\n                break;\n            case 18:\n                for (length = tinf_read_bits(d, 7, 11); length; --length) {\n                    lengths[num++] = 0;\n                }\n                break;\n            default:\n                lengths[num++] = sym;\n                break;\n        }\n    }\n    tinf_build_tree(lt, lengths, 0, hlit);\n    tinf_build_tree(dt, lengths, hlit, hdist);\n}\nfunction tinf_inflate_block_data(d, lt, dt) {\n    for (;;) {\n        var sym = tinf_decode_symbol(d, lt);\n        if (sym === 256) {\n            return TINF_OK;\n        }\n        if (sym < 256) {\n            d.dest[d.destLen++] = sym;\n        }\n        else {\n            var length, dist, offs;\n            var i;\n            sym -= 257;\n            length = tinf_read_bits(d, length_bits[sym], length_base[sym]);\n            dist = tinf_decode_symbol(d, dt);\n            offs = d.destLen - tinf_read_bits(d, dist_bits[dist], dist_base[dist]);\n            for (i = offs; i < offs + length; ++i) {\n                d.dest[d.destLen++] = d.dest[i];\n            }\n        }\n    }\n}\nfunction tinf_inflate_uncompressed_block(d) {\n    var length, invlength;\n    var i;\n    while (d.bitcount > 8) {\n        d.sourceIndex--;\n        d.bitcount -= 8;\n    }\n    length = d.source[d.sourceIndex + 1];\n    length = 256 * length + d.source[d.sourceIndex];\n    invlength = d.source[d.sourceIndex + 3];\n    invlength = 256 * invlength + d.source[d.sourceIndex + 2];\n    if (length !== (~invlength & 0x0000ffff))\n        return TINF_DATA_ERROR;\n    d.sourceIndex += 4;\n    for (i = length; i; --i)\n        d.dest[d.destLen++] = d.source[d.sourceIndex++];\n    d.bitcount = 0;\n    return TINF_OK;\n}\nfunction tinf_uncompress(source, dest) {\n    var d = new Data(source, dest);\n    var bfinal, btype, res;\n    do {\n        bfinal = tinf_getbit(d);\n        btype = tinf_read_bits(d, 2, 0);\n        switch (btype) {\n            case 0:\n                res = tinf_inflate_uncompressed_block(d);\n                break;\n            case 1:\n                res = tinf_inflate_block_data(d, sltree, sdtree);\n                break;\n            case 2:\n                tinf_decode_trees(d, d.ltree, d.dtree);\n                res = tinf_inflate_block_data(d, d.ltree, d.dtree);\n                break;\n            default:\n                res = TINF_DATA_ERROR;\n        }\n        if (res !== TINF_OK)\n            throw new Error('Data error');\n    } while (!bfinal);\n    if (d.destLen < d.dest.length) {\n        if (typeof d.dest.slice === 'function')\n            return d.dest.slice(0, d.destLen);\n        else\n            return d.dest.subarray(0, d.destLen);\n    }\n    return d.dest;\n}\ntinf_build_fixed_trees(sltree, sdtree);\ntinf_build_bits_base(length_bits, length_base, 4, 3);\ntinf_build_bits_base(dist_bits, dist_base, 2, 1);\nlength_bits[28] = 0;\nlength_base[28] = 258;\nexport default tinf_uncompress;\n//# sourceMappingURL=tiny-inflate.js.map","import inflate from './tiny-inflate';\nconst SHIFT_1 = 6 + 5;\nconst SHIFT_2 = 5;\nconst SHIFT_1_2 = SHIFT_1 - SHIFT_2;\nconst OMITTED_BMP_INDEX_1_LENGTH = 0x10000 >> SHIFT_1;\nconst INDEX_2_BLOCK_LENGTH = 1 << SHIFT_1_2;\nconst INDEX_2_MASK = INDEX_2_BLOCK_LENGTH - 1;\nconst INDEX_SHIFT = 2;\nconst DATA_BLOCK_LENGTH = 1 << SHIFT_2;\nconst DATA_MASK = DATA_BLOCK_LENGTH - 1;\nconst LSCP_INDEX_2_OFFSET = 0x10000 >> SHIFT_2;\nconst LSCP_INDEX_2_LENGTH = 0x400 >> SHIFT_2;\nconst INDEX_2_BMP_LENGTH = LSCP_INDEX_2_OFFSET + LSCP_INDEX_2_LENGTH;\nconst UTF8_2B_INDEX_2_OFFSET = INDEX_2_BMP_LENGTH;\nconst UTF8_2B_INDEX_2_LENGTH = 0x800 >> 6;\nconst INDEX_1_OFFSET = UTF8_2B_INDEX_2_OFFSET + UTF8_2B_INDEX_2_LENGTH;\nconst DATA_GRANULARITY = 1 << INDEX_SHIFT;\nconst isBigEndian = (new Uint8Array(new Uint32Array([0x12345678]).buffer)[0] === 0x12);\nclass UnicodeTrie {\n    constructor(data) {\n        const view = new DataView(data.buffer);\n        this.highStart = view.getUint32(0, true);\n        this.errorValue = view.getUint32(4, true);\n        let uncompressedLength = view.getUint32(8, true);\n        data = data.subarray(12);\n        data = inflate(data, new Uint8Array(uncompressedLength));\n        data = inflate(data, new Uint8Array(uncompressedLength));\n        if (isBigEndian) {\n            const len = data.length;\n            for (let i = 0; i < len; i += 4) {\n                let x = data[i];\n                data[i] = data[i + 3];\n                data[i + 3] = x;\n                let y = data[i + 1];\n                data[i + 1] = data[i + 2];\n                data[i + 2] = y;\n            }\n        }\n        this.data = new Uint32Array(data.buffer);\n    }\n    get(codePoint) {\n        let index;\n        if ((codePoint < 0) || (codePoint > 0x10ffff)) {\n            return this.errorValue;\n        }\n        if ((codePoint < 0xd800) || ((codePoint > 0xdbff) && (codePoint <= 0xffff))) {\n            index = (this.data[codePoint >> SHIFT_2] << INDEX_SHIFT) + (codePoint & DATA_MASK);\n            return this.data[index];\n        }\n        if (codePoint <= 0xffff) {\n            index = (this.data[LSCP_INDEX_2_OFFSET + ((codePoint - 0xd800) >> SHIFT_2)] << INDEX_SHIFT) + (codePoint & DATA_MASK);\n            return this.data[index];\n        }\n        if (codePoint < this.highStart) {\n            index = this.data[(INDEX_1_OFFSET - OMITTED_BMP_INDEX_1_LENGTH) + (codePoint >> SHIFT_1)];\n            index = this.data[index + ((codePoint >> SHIFT_2) & INDEX_2_MASK)];\n            index = (index << INDEX_SHIFT) + (codePoint & DATA_MASK);\n            return this.data[index];\n        }\n        return this.data[this.data.length - DATA_GRANULARITY];\n    }\n}\nexport default UnicodeTrie;\n//# sourceMappingURL=unicode-trie.js.map","import UnicodeTrie from './unicode-trie';\nconst trieRaw = \"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\";\nfunction _dec(s) {\n    if (typeof Buffer !== 'undefined')\n        return Buffer.from(s, 'base64');\n    const bs = atob(s);\n    const r = new Uint8Array(bs.length);\n    for (let i = 0; i < r.length; ++i)\n        r[i] = bs.charCodeAt(i);\n    return r;\n}\nconst trieData = new UnicodeTrie(_dec(trieRaw));\nexport const GRAPHEME_BREAK_MASK = 0xF;\nexport const GRAPHEME_BREAK_SHIFT = 0;\nexport const CHARWIDTH_MASK = 0x30;\nexport const CHARWIDTH_SHIFT = 4;\nexport const GRAPHEME_BREAK_Other = 0;\nexport const GRAPHEME_BREAK_Prepend = 1;\nexport const GRAPHEME_BREAK_Extend = 2;\nexport const GRAPHEME_BREAK_Regional_Indicator = 3;\nexport const GRAPHEME_BREAK_SpacingMark = 4;\nexport const GRAPHEME_BREAK_Hangul_L = 5;\nexport const GRAPHEME_BREAK_Hangul_V = 6;\nexport const GRAPHEME_BREAK_Hangul_T = 7;\nexport const GRAPHEME_BREAK_Hangul_LV = 8;\nexport const GRAPHEME_BREAK_Hangul_LVT = 9;\nexport const GRAPHEME_BREAK_ZWJ = 10;\nexport const GRAPHEME_BREAK_ExtPic = 11;\nconst GRAPHEME_BREAK_SAW_Regional_Pair = 32;\nexport const CHARWIDTH_NORMAL = 0;\nexport const CHARWIDTH_FORCE_1COLUMN = 1;\nexport const CHARWIDTH_EA_AMBIGUOUS = 2;\nexport const CHARWIDTH_WIDE = 3;\nexport function infoToWidthInfo(info) {\n    return (info & CHARWIDTH_MASK) >> CHARWIDTH_SHIFT;\n}\nexport function infoToWidth(info, ambiguousIsWide = false) {\n    const v = infoToWidthInfo(info);\n    return v < CHARWIDTH_EA_AMBIGUOUS ? 1\n        : v >= CHARWIDTH_WIDE || ambiguousIsWide ? 2 : 1;\n}\nexport function strWidth(str, preferWide) {\n    let width = 0;\n    for (let i = 0; i < str.length;) {\n        const codePoint = str.codePointAt(i);\n        width += infoToWidth(getInfo(codePoint), preferWide);\n        i += (codePoint <= 0xffff) ? 1 : 2;\n    }\n    return width;\n}\nexport function columnToIndexInContext(str, startIndex, column, preferWide) {\n    let rv = 0;\n    for (let i = startIndex;;) {\n        if (i >= str.length)\n            return i;\n        const codePoint = str.codePointAt(i);\n        const w = infoToWidth(getInfo(codePoint), preferWide);\n        rv += w;\n        if (rv > column)\n            return i;\n        i += (codePoint <= 0xffff) ? 1 : 2;\n    }\n}\nexport function shouldJoin(beforeState, afterInfo) {\n    let beforeCode = (beforeState & GRAPHEME_BREAK_MASK) >> GRAPHEME_BREAK_SHIFT;\n    let afterCode = (afterInfo & GRAPHEME_BREAK_MASK) >> GRAPHEME_BREAK_SHIFT;\n    if (_shouldJoin(beforeCode, afterCode)) {\n        if (afterCode === GRAPHEME_BREAK_Regional_Indicator)\n            return GRAPHEME_BREAK_SAW_Regional_Pair;\n        else\n            return afterCode + 16;\n    }\n    else\n        return afterCode - 16;\n}\nexport function shouldJoinBackwards(beforeInfo, afterState) {\n    let afterCode = (afterState & GRAPHEME_BREAK_MASK) >> GRAPHEME_BREAK_SHIFT;\n    let beforeCode = (beforeInfo & GRAPHEME_BREAK_MASK) >> GRAPHEME_BREAK_SHIFT;\n    if (_shouldJoin(beforeCode, afterCode)) {\n        if (beforeCode === GRAPHEME_BREAK_Regional_Indicator)\n            return GRAPHEME_BREAK_SAW_Regional_Pair;\n        else\n            return beforeCode + 16;\n    }\n    else\n        return beforeCode - 16;\n}\nfunction _shouldJoin(beforeCode, afterCode) {\n    if (beforeCode >= GRAPHEME_BREAK_Hangul_L\n        && beforeCode <= GRAPHEME_BREAK_Hangul_LVT) {\n        if (beforeCode == GRAPHEME_BREAK_Hangul_L\n            && (afterCode == GRAPHEME_BREAK_Hangul_L\n                || afterCode == GRAPHEME_BREAK_Hangul_V\n                || afterCode == GRAPHEME_BREAK_Hangul_LV\n                || afterCode == GRAPHEME_BREAK_Hangul_LVT))\n            return true;\n        if ((beforeCode == GRAPHEME_BREAK_Hangul_LV\n            || beforeCode == GRAPHEME_BREAK_Hangul_V)\n            && (afterCode == GRAPHEME_BREAK_Hangul_V\n                || afterCode == GRAPHEME_BREAK_Hangul_T))\n            return true;\n        if ((beforeCode == GRAPHEME_BREAK_Hangul_LVT\n            || beforeCode == GRAPHEME_BREAK_Hangul_T)\n            && afterCode == GRAPHEME_BREAK_Hangul_T)\n            return true;\n    }\n    if (afterCode == GRAPHEME_BREAK_Extend\n        || afterCode == GRAPHEME_BREAK_ZWJ\n        || beforeCode == GRAPHEME_BREAK_Prepend\n        || afterCode == GRAPHEME_BREAK_SpacingMark)\n        return true;\n    if (beforeCode == GRAPHEME_BREAK_ZWJ\n        && afterCode == GRAPHEME_BREAK_ExtPic)\n        return true;\n    if (afterCode == GRAPHEME_BREAK_Regional_Indicator\n        && beforeCode == GRAPHEME_BREAK_Regional_Indicator)\n        return true;\n    return false;\n}\nexport function getInfo(codePoint) {\n    return trieData.get(codePoint);\n}\n//# sourceMappingURL=UnicodeProperties.js.map","import { UnicodeService } from 'common/services/UnicodeService';\nimport * as UC from './third-party/UnicodeProperties';\nexport class UnicodeGraphemeProvider {\n    constructor(handleGraphemes = true) {\n        this.ambiguousCharsAreWide = false;\n        this.version = handleGraphemes ? '15-graphemes' : '15';\n        this.handleGraphemes = handleGraphemes;\n    }\n    charProperties(codepoint, preceding) {\n        if ((codepoint >= 32 && codepoint < 127) && (preceding >> 3) === 0) {\n            return UnicodeGraphemeProvider._plainNarrowProperties;\n        }\n        let charInfo = UC.getInfo(codepoint);\n        let w = UC.infoToWidthInfo(charInfo);\n        let shouldJoin = false;\n        if (w >= 2) {\n            w = w === 3 || this.ambiguousCharsAreWide || codepoint === 0xfe0f ? 2 : 1;\n        }\n        else {\n            w = 1;\n        }\n        if (preceding !== 0) {\n            const oldWidth = UnicodeService.extractWidth(preceding);\n            if (this.handleGraphemes) {\n                charInfo = UC.shouldJoin(UnicodeService.extractCharKind(preceding), charInfo);\n            }\n            else {\n                charInfo = w === 0 ? 1 : 0;\n            }\n            shouldJoin = charInfo > 0;\n            if (shouldJoin) {\n                if (oldWidth > w) {\n                    w = oldWidth;\n                }\n                else if (charInfo === 32) {\n                    w = 2;\n                }\n            }\n        }\n        return UnicodeService.createPropertyValue(charInfo, w, shouldJoin);\n    }\n    wcwidth(codepoint) {\n        const charInfo = UC.getInfo(codepoint);\n        const w = UC.infoToWidthInfo(charInfo);\n        const kind = (charInfo & UC.GRAPHEME_BREAK_MASK) >> UC.GRAPHEME_BREAK_SHIFT;\n        if (kind === UC.GRAPHEME_BREAK_Extend || kind === UC.GRAPHEME_BREAK_Prepend) {\n            return 0;\n        }\n        if (w >= 2 && (w === 3 || this.ambiguousCharsAreWide)) {\n            return 2;\n        }\n        return 1;\n    }\n}\nUnicodeGraphemeProvider._plainNarrowProperties = UnicodeService.createPropertyValue(UC.GRAPHEME_BREAK_Other, 1, false);\n//# sourceMappingURL=UnicodeGraphemeProvider.js.map","import { UnicodeGraphemeProvider } from './UnicodeGraphemeProvider';\nexport class UnicodeGraphemesAddon {\n    constructor() {\n        this._oldVersion = '';\n    }\n    activate(terminal) {\n        if (!this._provider15) {\n            this._provider15 = new UnicodeGraphemeProvider(false);\n        }\n        if (!this._provider15Graphemes) {\n            this._provider15Graphemes = new UnicodeGraphemeProvider(true);\n        }\n        const unicode = terminal.unicode;\n        this._unicode = unicode;\n        unicode.register(this._provider15);\n        unicode.register(this._provider15Graphemes);\n        this._oldVersion = unicode.activeVersion;\n        unicode.activeVersion = '15-graphemes';\n    }\n    dispose() {\n        if (this._unicode) {\n            this._unicode.activeVersion = this._oldVersion;\n        }\n    }\n}\n//# sourceMappingURL=UnicodeGraphemesAddon.js.map"],"names":["inflate","UC.getInfo","UC.infoToWidthInfo","shouldJoin","UC.shouldJoin","UC.GRAPHEME_BREAK_MASK","UC.GRAPHEME_BREAK_SHIFT","UC.GRAPHEME_BREAK_Extend","UC.GRAPHEME_BREAK_Prepend","UC.GRAPHEME_BREAK_Other"],"mappings":"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"}